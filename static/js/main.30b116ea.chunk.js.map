{"version":3,"sources":["test.jsx","App.js","reportWebVitals.js","index.js"],"names":["faceUV","Array","i","Vector4","SpinningBox","props","useEffect","URLImage","boxRef","useRef","name","ref","size","position","height","width","depth","wrap","url","assignTo","SceneWithSpinningBoxes","lng","style","antialias","adaptToDeviceRatio","canvasId","target","Vector3","Zero","alpha","Math","PI","beta","radius","intensity","direction","Up","color","Color3","FromHexString","App","mapboxgl","accessToken","mapContainer","map","useState","setLng","lat","setLat","zoom","setZoom","current","Map","container","center","on","getCenter","toFixed","getZoom","get3DImage","setGet3dImage","className","onClick","display","alignContent","justifyContent","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30b116ea.chunk.js","sourcesContent":["import React, { useRef, useState,useEffect} from \"react\";\nimport { Engine, Scene } from \"react-babylonjs\";\nimport { Vector3, Color3, Vector4 } from \"@babylonjs/core\";\n\n// var texture = new BABYLON.Texture(, scene);\n//     mat.diffuseTexture = texture;\n\n\n\nvar columns = 6; // 6 columns\nvar rows = 1; // 1 row\n\n//alien sprite\nvar faceUV = new Array(6);\n\n//set all faces to same\nfor (var i = 0; i < 6; i++) {\n  faceUV[i] = new Vector4(i / columns, 0, (i + 1) / columns, 1 / rows);\n}\n\nconst SpinningBox = (props) => {\n  useEffect(() => {\n    \n  }, [props.URLImage])\n  const boxRef = useRef(null);\n\n  return (\n    <box\n      name={props.name}\n      ref={boxRef}\n      size={40}\n      position={props.position}\n      height={1}\n      width={0.75}\n      depth={0.25}\n      faceUV={faceUV}\n      wrap\n    >\n      <standardMaterial>\n        <texture url={props.URLImage} assignTo={\"diffuseTexture\"} />\n      </standardMaterial>\n    </box>\n  );\n};\n\nexport default function SceneWithSpinningBoxes({URLImage,lng}){\nuseEffect(() => {\n  <SpinningBox/>\n}, [URLImage,lng])\n return(\n  <div style={{width:\"100%\",height:\"100%\"}}>\n    <Engine antialias adaptToDeviceRatio canvasId=\"babylonJS\">\n      <Scene>\n        <arcRotateCamera\n          name=\"camera1\"\n          target={Vector3.Zero()}\n          alpha={(3 * Math.PI) / 4}\n          beta={Math.PI / 4}\n          radius={2}\n        />\n        <hemisphericLight\n          name=\"light1\"\n          intensity={1}\n          direction={Vector3.Up()}\n        />\n        <SpinningBox\n          name=\"left\"\n          position={new Vector3(0, 0, 0)}\n          color={Color3.FromHexString(\"#E0E0E0\")}\n          URLImage={URLImage}\n          lng={lng}\n        />\n      </Scene>\n    </Engine>\n  </div>);\n}\n\n","import React, { useRef, useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./App.css\";\nimport SceneWithSpinningBoxes from \"./test.jsx\"\nfunction App() {\n  mapboxgl.accessToken =\n    \"pk.eyJ1IjoiYW1yaWtzaW5naDc4NiIsImEiOiJja29yMHB2ZDQxMGR0MnZwaWRsZWVrd3lmIn0.clxl95ch73-w4O-McFfL1w\";\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lng, setLng] = useState(78);\n  const [lat, setLat] = useState(23);\n  const [zoom, setZoom] = useState(3);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [lng, lat],\n      zoom: zoom,\n    });\n  });\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n    map.current.on(\"move\", () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n  const [get3DImage,setGet3dImage] = useState(false);\n  const URLImage = \"https://api.mapbox.com/styles/v1/mapbox/light-v10/static/\"+lng+\",\"+lat+\",\"+zoom+\"/500x300?access_token=pk.eyJ1IjoiYW1yaWtzaW5naDc4NiIsImEiOiJja29wZ2RicXQwa3ZpMnJudXE4OHJmd2NoIn0.NHIyPWX9FfNSCFRUwpvGfw\";\n  useEffect(()=>{<SceneWithSpinningBoxes URLImage={URLImage} lng={lng}/>},[URLImage])\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidebar\">\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n      </div>\n      <div ref={mapContainer} className=\"map-container\" />\n      <button onClick={()=>{setGet3dImage(true)}}>Get 3D Cuboid Image</button>\n      <button onClick={()=>{setGet3dImage(false)}}>try another</button>\n      {get3DImage === true  ? (<><div style={{display:\"flex\",alignContent:\"space-between\",justifyContent:\"space-around\"}}> \n      <img src={\"https://api.mapbox.com/styles/v1/mapbox/light-v10/static/\"+lng+\",\"+lat+\",\"+zoom+\"/500x300?access_token=pk.eyJ1IjoiYW1yaWtzaW5naDc4NiIsImEiOiJja29wZ2RicXQwa3ZpMnJudXE4OHJmd2NoIn0.NHIyPWX9FfNSCFRUwpvGfw\"} alt=\"Map Image\"/>\n      \n      { <SceneWithSpinningBoxes URLImage={URLImage} lng={lng}/>}\n            </div>\n      </>):\"\"}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}